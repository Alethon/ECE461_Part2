name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  API_KEY: '${{ secrets.API_KEY }}'


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up GCC
      uses: egor-tensin/setup-gcc@v1
      with:
        version: latest
        platform: x64

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19

    - name: Build golib
      run: |
        cd cli
        go build -o libpackageanalyze.so -buildmode=c-shared main.go 
        sudo cp libpackageanalyze.* /usr/lib
        cd ..

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '17'

    - name: Build jheader
      run: javac api_paths/src/main/java/com/spring_rest_api/cli/*.java -h ./cli

    - name: Build clib
      run: sudo g++ -fPIC -I"$JAVA_HOME/include" -I"$JAVA_HOME/include/linux" -shared -o libNetScoreUtil.so cli/com_spring_rest_api_cli_NetScoreUtil.cpp /usr/lib/libpackageanalyze.so

    - name: Create accountKey.json from FIREBASE_CREDENTIALS_BASE64
      run: |
        echo "${{ secrets.FIREBASE_CREDENTIALS_BASE64 }}" | base64 --decode > accountKey.json

    - name: Build with Maven
      run: mvn package
      working-directory: api_paths
    
    - name: Run Spring Boot application
      run: |
        GOOGLE_APPLICATION_CREDENTIALS_ABSOLUTE_PATH=$(realpath accountKey.json)
        export GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS_ABSOLUTE_PATH
        java -Djava.security.egd=file:/dev/./urandom -jar api_paths/target/*.jar &
        sleep 30

    - name: Test Spring Boot application
      run: curl http://localhost:8080/

    - name: Docker login
      run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin


    # - name: Build for Docker
    #   run: |
    #     docker build --no-cache -t my-docker-image --build-arg API_KEY=$API_KEY .
    #     docker images
    #     docker run --rm -d -p 8080:8080 --name my-docker-container -v ${PWD}/api_paths/src/main/resources/application.properties:/app/resources/application.properties my-docker-image
    #     sleep 30

    # - name: Get container ID
    #   run: |
    #     container_id=$(docker ps -aqf "name=my-docker-container")
    #     echo "container_id=$container_id" >> $GITHUB_ENV
        
    # - name: Print Docker container logs
    #   run: |
    #     container_id=$(docker ps -aqf "name=my-docker-container")
    #     if [ -n "$container_id" ]; then
    #       docker logs $container_id
    #     else
    #       echo "Container 'my-docker-container' not found or has exited early."
    #     fi



    # - name: Verify Spring Boot application
    #   run: |
    #     curl http://localhost:8080/
      
    # - name: Stop Docker container
    #   run: docker stop my-docker-container
